//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 55 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `CustomButtonBackgroundColor`.
    var customButtonBackgroundColor: RswiftResources.ColorResource { .init(name: "CustomButtonBackgroundColor", path: [], bundle: bundle) }

    /// Color `CustomButtonBorderColor`.
    var customButtonBorderColor: RswiftResources.ColorResource { .init(name: "CustomButtonBorderColor", path: [], bundle: bundle) }

    /// Color `CustomButtonTextColor`.
    var customButtonTextColor: RswiftResources.ColorResource { .init(name: "CustomButtonTextColor", path: [], bundle: bundle) }

    /// Color `CustomButttonGrayBorder`.
    var customButttonGrayBorder: RswiftResources.ColorResource { .init(name: "CustomButttonGrayBorder", path: [], bundle: bundle) }

    /// Color `card10bg`.
    var card10bg: RswiftResources.ColorResource { .init(name: "card10bg", path: [], bundle: bundle) }

    /// Color `card11bg`.
    var card11bg: RswiftResources.ColorResource { .init(name: "card11bg", path: [], bundle: bundle) }

    /// Color `card12bg`.
    var card12bg: RswiftResources.ColorResource { .init(name: "card12bg", path: [], bundle: bundle) }

    /// Color `card13bg`.
    var card13bg: RswiftResources.ColorResource { .init(name: "card13bg", path: [], bundle: bundle) }

    /// Color `card14bg`.
    var card14bg: RswiftResources.ColorResource { .init(name: "card14bg", path: [], bundle: bundle) }

    /// Color `card15bg`.
    var card15bg: RswiftResources.ColorResource { .init(name: "card15bg", path: [], bundle: bundle) }

    /// Color `card16bg`.
    var card16bg: RswiftResources.ColorResource { .init(name: "card16bg", path: [], bundle: bundle) }

    /// Color `card17bg`.
    var card17bg: RswiftResources.ColorResource { .init(name: "card17bg", path: [], bundle: bundle) }

    /// Color `card1bg`.
    var card1bg: RswiftResources.ColorResource { .init(name: "card1bg", path: [], bundle: bundle) }

    /// Color `card2bg`.
    var card2bg: RswiftResources.ColorResource { .init(name: "card2bg", path: [], bundle: bundle) }

    /// Color `card3bg`.
    var card3bg: RswiftResources.ColorResource { .init(name: "card3bg", path: [], bundle: bundle) }

    /// Color `card4bg`.
    var card4bg: RswiftResources.ColorResource { .init(name: "card4bg", path: [], bundle: bundle) }

    /// Color `card5bg`.
    var card5bg: RswiftResources.ColorResource { .init(name: "card5bg", path: [], bundle: bundle) }

    /// Color `card6bg`.
    var card6bg: RswiftResources.ColorResource { .init(name: "card6bg", path: [], bundle: bundle) }

    /// Color `card7bg`.
    var card7bg: RswiftResources.ColorResource { .init(name: "card7bg", path: [], bundle: bundle) }

    /// Color `card8bg`.
    var card8bg: RswiftResources.ColorResource { .init(name: "card8bg", path: [], bundle: bundle) }

    /// Color `card9bg`.
    var card9bg: RswiftResources.ColorResource { .init(name: "card9bg", path: [], bundle: bundle) }

    /// Color `color1`.
    var color1: RswiftResources.ColorResource { .init(name: "color1", path: [], bundle: bundle) }

    /// Color `color10`.
    var color10: RswiftResources.ColorResource { .init(name: "color10", path: [], bundle: bundle) }

    /// Color `color10text`.
    var color10text: RswiftResources.ColorResource { .init(name: "color10text", path: [], bundle: bundle) }

    /// Color `color11`.
    var color11: RswiftResources.ColorResource { .init(name: "color11", path: [], bundle: bundle) }

    /// Color `color11text`.
    var color11text: RswiftResources.ColorResource { .init(name: "color11text", path: [], bundle: bundle) }

    /// Color `color12`.
    var color12: RswiftResources.ColorResource { .init(name: "color12", path: [], bundle: bundle) }

    /// Color `color12text`.
    var color12text: RswiftResources.ColorResource { .init(name: "color12text", path: [], bundle: bundle) }

    /// Color `color13`.
    var color13: RswiftResources.ColorResource { .init(name: "color13", path: [], bundle: bundle) }

    /// Color `color13text`.
    var color13text: RswiftResources.ColorResource { .init(name: "color13text", path: [], bundle: bundle) }

    /// Color `color14`.
    var color14: RswiftResources.ColorResource { .init(name: "color14", path: [], bundle: bundle) }

    /// Color `color14text`.
    var color14text: RswiftResources.ColorResource { .init(name: "color14text", path: [], bundle: bundle) }

    /// Color `color15`.
    var color15: RswiftResources.ColorResource { .init(name: "color15", path: [], bundle: bundle) }

    /// Color `color15text`.
    var color15text: RswiftResources.ColorResource { .init(name: "color15text", path: [], bundle: bundle) }

    /// Color `color16`.
    var color16: RswiftResources.ColorResource { .init(name: "color16", path: [], bundle: bundle) }

    /// Color `color16text`.
    var color16text: RswiftResources.ColorResource { .init(name: "color16text", path: [], bundle: bundle) }

    /// Color `color17`.
    var color17: RswiftResources.ColorResource { .init(name: "color17", path: [], bundle: bundle) }

    /// Color `color17text`.
    var color17text: RswiftResources.ColorResource { .init(name: "color17text", path: [], bundle: bundle) }

    /// Color `color1text`.
    var color1text: RswiftResources.ColorResource { .init(name: "color1text", path: [], bundle: bundle) }

    /// Color `color2`.
    var color2: RswiftResources.ColorResource { .init(name: "color2", path: [], bundle: bundle) }

    /// Color `color2text`.
    var color2text: RswiftResources.ColorResource { .init(name: "color2text", path: [], bundle: bundle) }

    /// Color `color3`.
    var color3: RswiftResources.ColorResource { .init(name: "color3", path: [], bundle: bundle) }

    /// Color `color3text`.
    var color3text: RswiftResources.ColorResource { .init(name: "color3text", path: [], bundle: bundle) }

    /// Color `color4`.
    var color4: RswiftResources.ColorResource { .init(name: "color4", path: [], bundle: bundle) }

    /// Color `color4text`.
    var color4text: RswiftResources.ColorResource { .init(name: "color4text", path: [], bundle: bundle) }

    /// Color `color5`.
    var color5: RswiftResources.ColorResource { .init(name: "color5", path: [], bundle: bundle) }

    /// Color `color5text`.
    var color5text: RswiftResources.ColorResource { .init(name: "color5text", path: [], bundle: bundle) }

    /// Color `color6`.
    var color6: RswiftResources.ColorResource { .init(name: "color6", path: [], bundle: bundle) }

    /// Color `color6text`.
    var color6text: RswiftResources.ColorResource { .init(name: "color6text", path: [], bundle: bundle) }

    /// Color `color7`.
    var color7: RswiftResources.ColorResource { .init(name: "color7", path: [], bundle: bundle) }

    /// Color `color7text`.
    var color7text: RswiftResources.ColorResource { .init(name: "color7text", path: [], bundle: bundle) }

    /// Color `color8`.
    var color8: RswiftResources.ColorResource { .init(name: "color8", path: [], bundle: bundle) }

    /// Color `color8text`.
    var color8text: RswiftResources.ColorResource { .init(name: "color8text", path: [], bundle: bundle) }

    /// Color `color9`.
    var color9: RswiftResources.ColorResource { .init(name: "color9", path: [], bundle: bundle) }

    /// Color `color9text`.
    var color9text: RswiftResources.ColorResource { .init(name: "color9text", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 26 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `backButton`.
    var backButton: RswiftResources.ImageResource { .init(name: "backButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `background`.
    var background: RswiftResources.ImageResource { .init(name: "background", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cards`.
    var cards: RswiftResources.ImageResource { .init(name: "cards", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `checkmarkIcon`.
    var checkmarkIcon: RswiftResources.ImageResource { .init(name: "checkmarkIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `copyright`.
    var copyright: RswiftResources.ImageResource { .init(name: "copyright", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `crossButton`.
    var crossButton: RswiftResources.ImageResource { .init(name: "crossButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `emptyCheckmarkIcon`.
    var emptyCheckmarkIcon: RswiftResources.ImageResource { .init(name: "emptyCheckmarkIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `familyIcon`.
    var familyIcon: RswiftResources.ImageResource { .init(name: "familyIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `globe`.
    var globe: RswiftResources.ImageResource { .init(name: "globe", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `hobbiIcon`.
    var hobbiIcon: RswiftResources.ImageResource { .init(name: "hobbiIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `instagram`.
    var instagram: RswiftResources.ImageResource { .init(name: "instagram", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `lockedHeart`.
    var lockedHeart: RswiftResources.ImageResource { .init(name: "lockedHeart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `mechtiIcon`.
    var mechtiIcon: RswiftResources.ImageResource { .init(name: "mechtiIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `previousCardButton`.
    var previousCardButton: RswiftResources.ImageResource { .init(name: "previousCardButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `privacy`.
    var privacy: RswiftResources.ImageResource { .init(name: "privacy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `rate`.
    var rate: RswiftResources.ImageResource { .init(name: "rate", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `rightArrow`.
    var rightArrow: RswiftResources.ImageResource { .init(name: "rightArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings`.
    var settings: RswiftResources.ImageResource { .init(name: "settings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `share`.
    var share: RswiftResources.ImageResource { .init(name: "share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `shareButton`.
    var shareButton: RswiftResources.ImageResource { .init(name: "shareButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `smallLogo`.
    var smallLogo: RswiftResources.ImageResource { .init(name: "smallLogo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `support`.
    var support: RswiftResources.ImageResource { .init(name: "support", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `telegram`.
    var telegram: RswiftResources.ImageResource { .init(name: "telegram", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `terms`.
    var terms: RswiftResources.ImageResource { .init(name: "terms", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `travelIcon`.
    var travelIcon: RswiftResources.ImageResource { .init(name: "travelIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `valuesIcon`.
    var valuesIcon: RswiftResources.ImageResource { .init(name: "valuesIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `SFProDisplay-Light`.
    var sfProDisplayLight: RswiftResources.FontResource { .init(name: "SFProDisplay-Light", bundle: bundle, filename: "SF-Pro-Display-Light.otf") }

    /// Font `SFProDisplay-Regular`.
    var sfProDisplayRegular: RswiftResources.FontResource { .init(name: "SFProDisplay-Regular", bundle: bundle, filename: "SF-Pro-Display-Regular.otf") }

    /// Font `SFProDisplay-Ultralight`.
    var sfProDisplayUltralight: RswiftResources.FontResource { .init(name: "SFProDisplay-Ultralight", bundle: bundle, filename: "SF-Pro-Display-Ultralight.otf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [sfProDisplayLight, sfProDisplayRegular, sfProDisplayUltralight].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 8 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `MomentApp.storekit`.
    var momentAppStorekit: RswiftResources.FileResource { .init(name: "MomentApp", pathExtension: "storekit", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Property List.plist`.
    var propertyListPlist: RswiftResources.FileResource { .init(name: "Property List", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SF-Pro-Display-Light.otf`.
    var sfProDisplayLightOtf: RswiftResources.FileResource { .init(name: "SF-Pro-Display-Light", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SF-Pro-Display-Regular.otf`.
    var sfProDisplayRegularOtf: RswiftResources.FileResource { .init(name: "SF-Pro-Display-Regular", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SF-Pro-Display-Ultralight.otf`.
    var sfProDisplayUltralightOtf: RswiftResources.FileResource { .init(name: "SF-Pro-Display-Ultralight", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `StoreKitTestCertificate.cer`.
    var storeKitTestCertificateCer: RswiftResources.FileResource { .init(name: "StoreKitTestCertificate", pathExtension: "cer", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `privacyPolicy.rtf`.
    var privacyPolicyRtf: RswiftResources.FileResource { .init(name: "privacyPolicy", pathExtension: "rtf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `terms.rtf`.
    var termsRtf: RswiftResources.FileResource { .init(name: "terms", pathExtension: "rtf", bundle: bundle, locale: LocaleReference.none) }
  }
}